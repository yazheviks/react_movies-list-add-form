{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","components/Input/Input.js","components/NewMovie/NewMovie.js","App.js","index.js"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","defaultProps","MoviesList","movies","map","movie","key","imdbId","classNames","require","Input","errorField","field","fieldName","onChange","onBlur","name","placeholder","type","value","event","toUpperCase","slice","NewMovie","state","errorTitle","errorImgUrl","errorImdbUrl","errorImdbId","setState","target","errorName","inputValue","test","match","resetState","addMovie","this","props","errors","onSubmit","preventDefault","Component","App","moviesFromServer","prevState","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1e785428.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './MovieCard.scss';\n\nexport const MovieCard = ({ title, description, imgUrl, imdbUrl }) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n\nMovieCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  imgUrl: PropTypes.string.isRequired,\n  imdbUrl: PropTypes.string.isRequired,\n};\n\nMovieCard.defaultProps = {\n  description: '',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      description: PropTypes.string,\n      imgUrl: PropTypes.string.isRequired,\n      imdbUrl: PropTypes.string.isRequired,\n    }),\n  ),\n};\n\nMoviesList.defaultProps = {\n  movies: [],\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst classNames = require('classnames');\n\nexport const Input = ({ errorField, field, fieldName, onChange, onBlur }) => (\n  <div>\n    <input\n      name={fieldName}\n      placeholder={fieldName}\n      type=\"text\"\n      value={field}\n      className={\n        classNames(\n          'form-control',\n          // eslint-disable-next-line no-nested-ternary\n          `${errorField === 'valid'\n            ? 'is-valid'\n            : errorField\n              ? 'is-invalid'\n              : ''}`,\n        )\n      }\n      onChange={event => onChange(event)}\n      onBlur={() => {\n        onBlur(\n          fieldName, `error${fieldName[0].toUpperCase()}${fieldName.slice(1)}`,\n        );\n      }}\n    />\n\n    {/* eslint-disable-next-line no-nested-ternary */}\n    {errorField === 'empty'\n      ? <div>This field should not be empty</div>\n      : errorField === 'invalid'\n        ? <div>This should be URL</div>\n        : ''}\n  </div>\n);\n\nInput.propTypes = {\n  errorField: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.string,\n  ]).isRequired,\n  field: PropTypes.string.isRequired,\n  fieldName: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  onBlur: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Input } from '../Input';\nimport './NewMovie.scss';\n\nexport class NewMovie extends Component {\n  state = {\n    title: '',\n    description: '',\n    imgUrl: '',\n    imdbUrl: '',\n    imdbId: '',\n    errorTitle: false,\n    errorImgUrl: false,\n    errorImdbUrl: false,\n    errorImdbId: false,\n  };\n\n  onChange = (event) => {\n    this.setState({\n      [event.target.name]: event.target.value,\n    });\n  }\n\n  onBlur = (fieldName, errorName) => {\n    const inputValue = this.state[fieldName];\n\n    if (!inputValue) {\n      this.setState({\n        [errorName]: 'empty',\n      });\n\n      return;\n    }\n\n    if (/url/i.test(fieldName)) {\n      // eslint-disable-next-line max-len\n      if (!inputValue.match(/^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)/)) {\n        this.setState({\n          [errorName]: 'invalid',\n        });\n      } else {\n        this.setState({\n          [errorName]: 'valid',\n        });\n      }\n\n      return;\n    }\n\n    this.setState({\n      [errorName]: 'valid',\n    });\n  }\n\n  resetState = () => {\n    this.setState({\n      title: '',\n      description: '',\n      imgUrl: '',\n      imdbUrl: '',\n      imdbId: '',\n      errorTitle: false,\n      errorImgUrl: false,\n      errorImdbUrl: false,\n      errorImdbId: false,\n    });\n  }\n\n  render() {\n    const { addMovie } = this.props;\n\n    const {\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n      errorTitle,\n      errorImgUrl,\n      errorImdbUrl,\n      errorImdbId,\n    } = this.state;\n\n    const errors = errorTitle === true || !title\n      || errorImgUrl === true || !imgUrl\n      || errorImdbUrl === true || !imdbUrl\n      || errorImdbId === true || !imdbId;\n\n    return (\n      <form\n        className=\"form form-group\"\n        onSubmit={(event) => {\n          event.preventDefault();\n          if (errors) {\n            return;\n          }\n\n          addMovie(this.state);\n          this.resetState();\n        }}\n      >\n        <Input\n          errorField={errorTitle}\n          field={title}\n          fieldName=\"title\"\n          onChange={this.onChange}\n          onBlur={this.onBlur}\n        />\n\n        <textarea\n          name=\"description\"\n          placeholder=\"description\"\n          type=\"text\"\n          className=\"form-control\"\n          value={description}\n          onChange={event => this.onChange(event)}\n        />\n\n        <Input\n          errorField={errorImgUrl}\n          field={imgUrl}\n          fieldName=\"imgUrl\"\n          onChange={this.onChange}\n          onBlur={this.onBlur}\n        />\n\n        <Input\n          errorField={errorImdbUrl}\n          field={imdbUrl}\n          fieldName=\"imdbUrl\"\n          onChange={this.onChange}\n          onBlur={this.onBlur}\n        />\n\n        <Input\n          errorField={errorImdbId}\n          field={imdbId}\n          fieldName=\"imdbId\"\n          onChange={this.onChange}\n          onBlur={this.onBlur}\n        />\n\n        <button\n          type=\"submit\"\n          className={errors ? 'btn btn-dark disabled' : 'btn btn-dark'}\n        >\n          Add a movie\n        </button>\n      </form>\n    );\n  }\n}\n\nNewMovie.propTypes = {\n  addMovie: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\nexport class App extends Component {\n  state = {\n    movies: moviesFromServer,\n  };\n\n  addMovie = (movie) => {\n    this.setState(prevState => ({\n      movies: [...prevState.movies, movie],\n    }));\n  };\n\n  render() {\n    const { movies } = this.state;\n\n    return (\n      <div className=\"page\">\n        <div className=\"page-content\">\n          <MoviesList movies={movies} />\n        </div>\n        <div className=\"sidebar\">\n          <NewMovie addMovie={this.addMovie} />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}