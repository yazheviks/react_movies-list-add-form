{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","components/Input/Input.js","consts.js","components/NewMovie/NewMovie.js","App.js","index.js"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","defaultProps","MoviesList","movies","map","movie","key","imdbId","classNames","require","Input","errorField","field","fieldName","onChange","onBlur","name","placeholder","type","value","event","URLRegExp","inputsFromServer","initialInputs","reduce","acc","initialErrors","error","doesContainsURL","inputName","test","NewMovie","state","inputs","errors","target","setState","prevState","inputValue","setError","text","match","handlerSubmit","preventDefault","Object","entries","some","newMovie","props","addMovie","resetState","this","hasErrors","inputNames","keys","onSubmit","Component","App","moviesFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.85746c55.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './MovieCard.scss';\n\nexport const MovieCard = ({ title, description, imgUrl, imdbUrl }) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n\nMovieCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  imgUrl: PropTypes.string.isRequired,\n  imdbUrl: PropTypes.string.isRequired,\n};\n\nMovieCard.defaultProps = {\n  description: '',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      description: PropTypes.string,\n      imgUrl: PropTypes.string.isRequired,\n      imdbUrl: PropTypes.string.isRequired,\n    }),\n  ),\n};\n\nMoviesList.defaultProps = {\n  movies: [],\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst classNames = require('classnames');\n\nexport const Input = ({ errorField, field, fieldName, onChange, onBlur }) => (\n  <div>\n    <input\n      name={fieldName}\n      placeholder={fieldName}\n      type=\"text\"\n      value={field}\n      className={\n        classNames(\n          'form-control',\n          {\n            'is-valid': errorField === null,\n            'is-invalid': errorField === 'invalid'\n              || errorField === 'emptyField',\n          },\n        )\n      }\n      onChange={event => onChange(event)}\n      onBlur={() => {\n        onBlur(fieldName);\n      }}\n    />\n\n    {/* eslint-disable-next-line no-nested-ternary */}\n    {errorField === 'emptyField'\n      ? <div>This field should not be empty</div>\n      : errorField === 'invalid'\n        ? <div>This should be URL</div>\n        : ''}\n  </div>\n);\n\nInput.propTypes = {\n  errorField: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.string,\n  ]).isRequired,\n  field: PropTypes.string.isRequired,\n  fieldName: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  onBlur: PropTypes.func.isRequired,\n};\n","// eslint-disable-next-line max-len\nexport const URLRegExp = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)/;\n\nexport const inputsFromServer = [\n  'title',\n  'description',\n  'imgUrl',\n  'imdbUrl',\n  'imdbId',\n];\n\nexport const initialInputs = inputsFromServer.reduce((acc, field) => {\n  return {\n    ...acc,\n    [field]: '',\n  };\n}, {});\n\nexport const initialErrors = inputsFromServer.reduce((acc, error) => {\n  return {\n    ...acc,\n    [error]: 'start',\n  };\n}, {});\n\nexport function doesContainsURL(inputName) {\n  return /url/i.test(inputName);\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Input } from '../Input';\nimport './NewMovie.scss';\nimport {\n  URLRegExp,\n  initialInputs,\n  initialErrors,\n  doesContainsURL,\n} from '../../consts';\n\nexport class NewMovie extends Component {\n  state = {\n    inputs: initialInputs,\n    errors: initialErrors,\n  };\n\n  onChange = (event) => {\n    const { name, value } = event.target;\n\n    this.setState(prevState => ({\n      inputs: {\n        ...prevState.inputs,\n        [name]: value,\n      },\n    }));\n  }\n\n  onBlur = (fieldName) => {\n    const inputValue = this.state.inputs[fieldName];\n    const setError = text => (\n      this.setState(prevState => ({\n        errors: {\n          ...prevState.errors,\n          [fieldName]: text,\n        },\n      }))\n    );\n\n    if (fieldName === 'description') {\n      return;\n    }\n\n    if (!inputValue) {\n      setError('emptyField');\n\n      return;\n    }\n\n    if (doesContainsURL(fieldName)) {\n      if (!inputValue.match(URLRegExp)) {\n        setError('invalid');\n      } else {\n        setError(null);\n      }\n\n      return;\n    }\n\n    setError(null);\n  }\n\n  handlerSubmit = (event) => {\n    event.preventDefault();\n    const { inputs } = this.state;\n\n    const hasError = Object.entries(this.state.errors).some(([name, error]) => {\n      return !!error && name !== 'description';\n    });\n\n    if (hasError) {\n      return;\n    }\n\n    const newMovie = Object.entries(inputs).reduce((acc, [name, value]) => {\n      return {\n        ...acc,\n        [name]: value,\n      };\n    }, {});\n\n    this.props.addMovie(newMovie);\n    this.resetState();\n  }\n\n  resetState = () => {\n    this.setState({\n      inputs: initialInputs,\n      errors: initialErrors,\n    });\n  }\n\n  render() {\n    const { inputs, errors } = this.state;\n    const hasErrors = Object.entries(errors).some(([name, error]) => {\n      return !!error && name !== 'description';\n    });\n    const inputNames = Object.keys(inputs);\n\n    return (\n      <form\n        className=\"form form-group\"\n        onSubmit={this.handlerSubmit}\n      >\n        {\n          inputNames.map(inputName => (\n            <Input\n              errorField={errors[inputName]}\n              field={inputs[inputName]}\n              fieldName={inputName}\n              onChange={this.onChange}\n              onBlur={this.onBlur}\n            />\n          ))\n        }\n\n        <button\n          type=\"submit\"\n          className={hasErrors ? 'btn btn-dark disabled' : 'btn btn-dark'}\n        >\n          Add a movie\n        </button>\n      </form>\n    );\n  }\n}\n\nNewMovie.propTypes = {\n  addMovie: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\nexport class App extends Component {\n  state = {\n    movies: moviesFromServer,\n  };\n\n  addMovie = (movie) => {\n    this.setState(prevState => ({\n      movies: [...prevState.movies, movie],\n    }));\n  };\n\n  render() {\n    const { movies } = this.state;\n\n    return (\n      <div className=\"page\">\n        <div className=\"page-content\">\n          <MoviesList movies={movies} />\n        </div>\n        <div className=\"sidebar\">\n          <NewMovie addMovie={this.addMovie} />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}